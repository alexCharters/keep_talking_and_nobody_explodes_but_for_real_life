// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/26/2019 10:10:17"
                                                                                
// Verilog Test Bench template for design : RegisterFile
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clock;
reg [3:0] register1Address;
reg [3:0] register2Address;
reg shouldWrite;
reg [3:0] writeAddress;
reg [15:0] writeData;
// wires                                               
wire [15:0]  register1Data;
wire [15:0]  register2Data;

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.register1Address(register1Address),
	.register1Data(register1Data),
	.register2Address(register2Address),
	.register2Data(register2Data),
	.shouldWrite(shouldWrite),
	.writeAddress(writeAddress),
	.writeData(writeData)
);
initial begin
	clock = 0;
	shouldWrite = 0;
	register1Address = 0;
	register2Address = 0;
	writeAddress = 0;
	#10;
	$display("Starting tests!")
	if(register1Data != 0 || register2Data != 0)
		$display("Register Zero is not hard coded to zero!");
	$stop;
end        

always 
#5 clock = ~clock;                                                                                            
endmodule

